buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

apply plugin: 'java'
apply plugin: 'idea'

version = property('version')
group = property('group')
archivesBaseName = property('id')

sourceSets{
    main.resources.srcDirs += 'src/main/generated/resources'
}

repositories {
    maven {
        name = "Progwml6 maven" // JEI
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${property('mc.version')}-${property('forge.version')}"

    compileOnly fg.deobf("mezz.jei:jei-1.16.2:${property('jei.version')}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:${property('jei.version')}")

    implementation 'com.intellij:annotations:+@jar'
}

minecraft {
    mappings channel: 'snapshot', version: property('mcp.version')

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            ideaModule "${project.name}.main"
            args '--username', property('mc.username'), '--password', property('mc.password')
            mods {
                Ludo {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            ideaModule "${project.name}.main"
            mods {
                Ludo {
                    source sourceSets.main
                }
            }
        }

        data {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            ideaModule "${project.name}.main"
            args '--mod', 'ludomutatio',
                    '--all',
                    '--output', file('src/main/generated/resources/'),
                    '--existing', file('src/main/resources'),
                    '--existing', file('src/main/generated/resources/')
            mods {
                Ludo {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.property('id'),
                "Specification-Vendor"    : project.property('authors'),
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : project.property('group'),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}